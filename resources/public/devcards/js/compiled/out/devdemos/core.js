// Compiled by ClojureScript 0.0-2202
goog.provide('devdemos.core');
goog.require('cljs.core');
goog.require('devcards.system');
goog.require('devcards.core');
goog.require('om.dom');
goog.require('devcards.system');
goog.require('om.dom');
goog.require('devcards.core');
goog.require('sablono.core');
goog.require('devdemos.two_zero');
goog.require('sablono.core');
goog.require('clojure.string');
goog.require('om.core');
goog.require('om.core');
goog.require('clojure.string');
cljs.core.enable_console_print_BANG_.call(null);
devcards.core.start_devcard_ui_BANG_.call(null);
devcards.core.start_figwheel_reloader_BANG_.call(null);
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"intro","intro",1114266078)], null),devcards.system.get_options.call(null,devcards.core.markdown_card.call(null,"## Devcards\n\n    ClojureScript Devcards are a tool to help you **quickly** surface what\n    you are working on. This page holds an quick introduction to\n    devcards.\n\n    #### This is a devcard\n\n    This is a **markdown-card**. You can create a markdown-card like\n    this like so:","```\n(defcard first-markdown-card (markdown-card \"# This is a heading\"))\n```\n","Devards are designed to be written inline with your code during\n    development. They are like fancy `println`s that can hold any\n    arbitrary functionality that you want.")),(function (){return devcards.core.markdown_card.call(null,"## Devcards\n\n    ClojureScript Devcards are a tool to help you **quickly** surface what\n    you are working on. This page holds an quick introduction to\n    devcards.\n\n    #### This is a devcard\n\n    This is a **markdown-card**. You can create a markdown-card like\n    this like so:","```\n(defcard first-markdown-card (markdown-card \"# This is a heading\"))\n```\n","Devards are designed to be written inline with your code during\n    development. They are like fancy `println`s that can hold any\n    arbitrary functionality that you want.");
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"intro-2","intro-2",2972349571)], null),devcards.system.get_options.call(null,devcards.core.markdown_card.call(null,"## Devcards are intended to be interactive\n\n   The cars on this page can be found in the file\n   `example_src/devdemos/core.cljs`.Please follow along in this file\n   to see how these examples are created.\n\n   If you ran `lein figwheel` to get this demo started, if you edit\n   and save the file that this code is in, you will see the changes\n   show up on this page as you save your file.\n\n   Go ahead and change this text to see the changes reflected here.")),(function (){return devcards.core.markdown_card.call(null,"## Devcards are intended to be interactive\n\n   The cars on this page can be found in the file\n   `example_src/devdemos/core.cljs`.Please follow along in this file\n   to see how these examples are created.\n\n   If you ran `lein figwheel` to get this demo started, if you edit\n   and save the file that this code is in, you will see the changes\n   show up on this page as you save your file.\n\n   Go ahead and change this text to see the changes reflected here.");
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"examples-intro","examples-intro",4111691610)], null),devcards.system.get_options.call(null,devcards.core.markdown_card.call(null,"## Devcard examples")),(function (){return devcards.core.markdown_card.call(null,"## Devcard examples");
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"edn-card-example","edn-card-example",1519002749)], null),devcards.system.get_options.call(null,devcards.core.edn_card.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"edn-card","edn-card",2693955040),"This is an edn card",new cljs.core.Keyword(null,"helpful?","helpful?",4519648405),"It lets you quickly view EDN"], null))),(function (){return devcards.core.edn_card.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"edn-card","edn-card",2693955040),"This is an edn card",new cljs.core.Keyword(null,"helpful?","helpful?",4519648405),"It lets you quickly view EDN"], null));
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"sablono-card-example","sablono-card-example",3513863796)], null),devcards.system.get_options.call(null,devcards.core.sab_card.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"div","div",1014003715),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"h2","h2",1013907516),"This is a Sablono card"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",1013904354),"It can help you interactively work on sablono templates like this one:"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"pre","pre",1014015509),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code","code",1016963423),"[:div.devcard-padding\n [:h2 \"This is a Sablono card\"]\n [:p \"It can help you interactively work on Sablono templates:\"]\n [:pre [:code (format-code ...)]]]"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",1013904354),"You can create a sablono card like so:"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"pre","pre",1014015509),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code","code",1016963423),"(defcard\n  sablono-card-example\n  (sab-card\n    [:div.devcard-padding\n     [:h2 \"This is a Sablono card\"]\n     [:p \"It can help you interactively work on Sablono templates:\"]\n     [:pre [:code (format-code ...)]]]))"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"h2","h2",1013907516),"Working on cards individually"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",1013904354),"You will notice that unlike the markdown cards, this card has a heading at the top: ",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code","code",1016963423),"sablono-card-example"], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",1013904354),"You can click the heading on this card to get it on a page all to itself."," This can reduce the noise of having all the cards on one page."], null)], null))),(function (){return devcards.core.sab_card.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"div","div",1014003715),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"h2","h2",1013907516),"This is a Sablono card"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",1013904354),"It can help you interactively work on sablono templates like this one:"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"pre","pre",1014015509),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code","code",1016963423),"[:div.devcard-padding\n [:h2 \"This is a Sablono card\"]\n [:p \"It can help you interactively work on Sablono templates:\"]\n [:pre [:code (format-code ...)]]]"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",1013904354),"You can create a sablono card like so:"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"pre","pre",1014015509),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code","code",1016963423),"(defcard\n  sablono-card-example\n  (sab-card\n    [:div.devcard-padding\n     [:h2 \"This is a Sablono card\"]\n     [:p \"It can help you interactively work on Sablono templates:\"]\n     [:pre [:code (format-code ...)]]]))"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"h2","h2",1013907516),"Working on cards individually"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",1013904354),"You will notice that unlike the markdown cards, this card has a heading at the top: ",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code","code",1016963423),"sablono-card-example"], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",1013904354),"You can click the heading on this card to get it on a page all to itself."," This can reduce the noise of having all the cards on one page."], null)], null));
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"react-card-example","react-card-example",563430573)], null),devcards.system.get_options.call(null,devcards.core.react_card.call(null,React.DOM.div({},React.DOM.h2({},"This is a react card.")))),(function (){return devcards.core.react_card.call(null,React.DOM.div({},React.DOM.h2({},"This is a react card.")));
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"react-runner-card-example","react-runner-card-example",4712995150)], null),devcards.system.get_options.call(null,devcards.core.react_runner_card.call(null,(function (data_atom){return React.DOM.div(null,React.DOM.h3(null,"This is a ","react-runner-card"),React.DOM.p(null,"This card triggers a re-render when it the atom is modified"),React.DOM.div(null,"Count: ",sablono.interpreter.interpret.call(null,new cljs.core.Keyword(null,"count","count",1108755585).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null,data_atom)))),React.DOM.ul(null,React.DOM.li(null,React.DOM.a({"onClick": (function (){return cljs.core.swap_BANG_.call(null,data_atom,cljs.core.update_in,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"count","count",1108755585)], null),cljs.core.inc);
})},"inc")),React.DOM.li(null,React.DOM.a({"onClick": (function (){return cljs.core.swap_BANG_.call(null,data_atom,cljs.core.update_in,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"count","count",1108755585)], null),cljs.core.dec);
})},"dec"))));
}),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"initial-state","initial-state",4067401786),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"count","count",1108755585),30], null)], null))),(function (){return devcards.core.react_runner_card.call(null,(function (data_atom){return React.DOM.div(null,React.DOM.h3(null,"This is a ","react-runner-card"),React.DOM.p(null,"This card triggers a re-render when it the atom is modified"),React.DOM.div(null,"Count: ",sablono.interpreter.interpret.call(null,new cljs.core.Keyword(null,"count","count",1108755585).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null,data_atom)))),React.DOM.ul(null,React.DOM.li(null,React.DOM.a({"onClick": (function (){return cljs.core.swap_BANG_.call(null,data_atom,cljs.core.update_in,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"count","count",1108755585)], null),cljs.core.inc);
})},"inc")),React.DOM.li(null,React.DOM.a({"onClick": (function (){return cljs.core.swap_BANG_.call(null,data_atom,cljs.core.update_in,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"count","count",1108755585)], null),cljs.core.dec);
})},"dec"))));
}),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"initial-state","initial-state",4067401786),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"count","count",1108755585),30], null)], null));
}));
devdemos.core.widget = (function widget(data,owner){if(typeof devdemos.core.t15671 !== 'undefined')
{} else
{
/**
* @constructor
*/
devdemos.core.t15671 = (function (owner,data,widget,meta15672){
this.owner = owner;
this.data = data;
this.widget = widget;
this.meta15672 = meta15672;
this.cljs$lang$protocol_mask$partition1$ = 0;
this.cljs$lang$protocol_mask$partition0$ = 393216;
})
devdemos.core.t15671.cljs$lang$type = true;
devdemos.core.t15671.cljs$lang$ctorStr = "devdemos.core/t15671";
devdemos.core.t15671.cljs$lang$ctorPrWriter = (function (this__8436__auto__,writer__8437__auto__,opt__8438__auto__){return cljs.core._write.call(null,writer__8437__auto__,"devdemos.core/t15671");
});
devdemos.core.t15671.prototype.om$core$IRender$ = true;
devdemos.core.t15671.prototype.om$core$IRender$render$arity$1 = (function (this$){var self__ = this;
var this$__$1 = this;return React.DOM.h2(null,"This is an om card, ",sablono.interpreter.interpret.call(null,new cljs.core.Keyword(null,"text","text",1017460895).cljs$core$IFn$_invoke$arity$1(self__.data)));
});
devdemos.core.t15671.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_15673){var self__ = this;
var _15673__$1 = this;return self__.meta15672;
});
devdemos.core.t15671.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_15673,meta15672__$1){var self__ = this;
var _15673__$1 = this;return (new devdemos.core.t15671(self__.owner,self__.data,self__.widget,meta15672__$1));
});
devdemos.core.__GT_t15671 = (function __GT_t15671(owner__$1,data__$1,widget__$1,meta15672){return (new devdemos.core.t15671(owner__$1,data__$1,widget__$1,meta15672));
});
}
return (new devdemos.core.t15671(owner,data,widget,null));
});
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"omcard-ex","omcard-ex",3791573092)], null),devcards.system.get_options.call(null,devcards.core.om_root_card.call(null,devdemos.core.widget,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",1017460895),"yozers"], null))),(function (){return devcards.core.om_root_card.call(null,devdemos.core.widget,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"text","text",1017460895),"yozers"], null));
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"test-card-ex","test-card-ex",3334539719)], null),devcards.system.get_options.call(null,devcards.core.test_card.call(null,"## Test card\n    Test cards provide interactive testing inline with your code.\n    Test cards allow arbitrary markdown in them, this can allow for a\n    literate coding style",new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"passed","passed",4313490402),cljs.core._EQ_.call(null,23,(21 + 2)),new cljs.core.Keyword(null,"type","type",1017479852),new cljs.core.Keyword(null,"is","is",1013907612),new cljs.core.Keyword(null,"body","body",1016933652),cljs.core.list(new cljs.core.Symbol(null,"=","=",-1640531466,null),23,cljs.core.list(new cljs.core.Symbol(null,"+","+",-1640531484,null),21,2))], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"passed","passed",4313490402),cljs.core._EQ_.call(null,((3 + 4) + 5),12),new cljs.core.Keyword(null,"val1","val1",1017516194),((3 + 4) + 5),new cljs.core.Keyword(null,"exp1","exp1",1017031974),cljs.core.list(new cljs.core.Symbol(null,"+","+",-1640531484,null),3,4,5),new cljs.core.Keyword(null,"type","type",1017479852),new cljs.core.Keyword(null,"are=","are=",1016906715),new cljs.core.Keyword(null,"val2","val2",1017516195),12,new cljs.core.Keyword(null,"exp2","exp2",1017031975),12], null),"`(+ 3 4 5)` is definitely equal to `12`",new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"passed","passed",4313490402),cljs.core.not_EQ_.call(null,((3 + 4) + 5),12),new cljs.core.Keyword(null,"val1","val1",1017516194),((3 + 4) + 5),new cljs.core.Keyword(null,"exp1","exp1",1017031974),cljs.core.list(new cljs.core.Symbol(null,"+","+",-1640531484,null),3,4,5),new cljs.core.Keyword(null,"type","type",1017479852),new cljs.core.Keyword(null,"are-not=","are-not=",3595476757),new cljs.core.Keyword(null,"val2","val2",1017516195),12,new cljs.core.Keyword(null,"exp2","exp2",1017031975),12], null))),(function (){return devcards.core.test_card.call(null,"## Test card\n    Test cards provide interactive testing inline with your code.\n    Test cards allow arbitrary markdown in them, this can allow for a\n    literate coding style",new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"passed","passed",4313490402),cljs.core._EQ_.call(null,23,(21 + 2)),new cljs.core.Keyword(null,"type","type",1017479852),new cljs.core.Keyword(null,"is","is",1013907612),new cljs.core.Keyword(null,"body","body",1016933652),cljs.core.list(new cljs.core.Symbol(null,"=","=",-1640531466,null),23,cljs.core.list(new cljs.core.Symbol(null,"+","+",-1640531484,null),21,2))], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"passed","passed",4313490402),cljs.core._EQ_.call(null,((3 + 4) + 5),12),new cljs.core.Keyword(null,"val1","val1",1017516194),((3 + 4) + 5),new cljs.core.Keyword(null,"exp1","exp1",1017031974),cljs.core.list(new cljs.core.Symbol(null,"+","+",-1640531484,null),3,4,5),new cljs.core.Keyword(null,"type","type",1017479852),new cljs.core.Keyword(null,"are=","are=",1016906715),new cljs.core.Keyword(null,"val2","val2",1017516195),12,new cljs.core.Keyword(null,"exp2","exp2",1017031975),12], null),"`(+ 3 4 5)` is definitely equal to `12`",new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"passed","passed",4313490402),cljs.core.not_EQ_.call(null,((3 + 4) + 5),12),new cljs.core.Keyword(null,"val1","val1",1017516194),((3 + 4) + 5),new cljs.core.Keyword(null,"exp1","exp1",1017031974),cljs.core.list(new cljs.core.Symbol(null,"+","+",-1640531484,null),3,4,5),new cljs.core.Keyword(null,"type","type",1017479852),new cljs.core.Keyword(null,"are-not=","are-not=",3595476757),new cljs.core.Keyword(null,"val2","val2",1017516195),12,new cljs.core.Keyword(null,"exp2","exp2",1017031975),12], null));
}));
devdemos.core.rand_strs = (function rand_strs(c){return cljs.core.repeatedly.call(null,c,(function (){return cljs.core.apply.call(null,cljs.core.str,cljs.core.map.call(null,(function (x){return cljs.core.char$.call(null,cljs.core.rand_int.call(null,255));
}),cljs.core.range.call(null,cljs.core.rand_int.call(null,12))));
}));
});
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"slider-intro","slider-intro",2075458034)], null),devcards.system.get_options.call(null,devcards.core.markdown_card.call(null,"## Slider card","A slider card helps you apply ranges of data to a function and see\n   the results. It will render the result with the edn-renderer by default.\n\n   If you want to render the data arbitrarily you can provide a\n   function that returns a React component to named argument `:value-render-func` ")),(function (){return devcards.core.markdown_card.call(null,"## Slider card","A slider card helps you apply ranges of data to a function and see\n   the results. It will render the result with the edn-renderer by default.\n\n   If you want to render the data arbitrarily you can provide a\n   function that returns a React component to named argument `:value-render-func` ");
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"slider-card-dev","slider-card-dev",1327093430)], null),devcards.system.get_options.call(null,devcards.core.slider_card.call(null,(function (p__15674){var map__15675 = p__15674;var map__15675__$1 = ((cljs.core.seq_QMARK_.call(null,map__15675))?cljs.core.apply.call(null,cljs.core.hash_map,map__15675):map__15675);var state = map__15675__$1;var z = cljs.core.get.call(null,map__15675__$1,new cljs.core.Keyword(null,"z","z",1013904364));var y = cljs.core.get.call(null,map__15675__$1,new cljs.core.Keyword(null,"y","y",1013904363));var x = cljs.core.get.call(null,map__15675__$1,new cljs.core.Keyword(null,"x","x",1013904362));return cljs.core.assoc.call(null,state,new cljs.core.Keyword(null,"result","result",4374444943),((x + y) + z));
}),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"x","x",1013904362),devdemos.core.rand_strs.call(null,255),new cljs.core.Keyword(null,"y","y",1013904363),devdemos.core.rand_strs.call(null,255),new cljs.core.Keyword(null,"z","z",1013904364),devdemos.core.rand_strs.call(null,255)], null))),(function (){return devcards.core.slider_card.call(null,(function (p__15676){var map__15677 = p__15676;var map__15677__$1 = ((cljs.core.seq_QMARK_.call(null,map__15677))?cljs.core.apply.call(null,cljs.core.hash_map,map__15677):map__15677);var state = map__15677__$1;var z = cljs.core.get.call(null,map__15677__$1,new cljs.core.Keyword(null,"z","z",1013904364));var y = cljs.core.get.call(null,map__15677__$1,new cljs.core.Keyword(null,"y","y",1013904363));var x = cljs.core.get.call(null,map__15677__$1,new cljs.core.Keyword(null,"x","x",1013904362));return cljs.core.assoc.call(null,state,new cljs.core.Keyword(null,"result","result",4374444943),((x + y) + z));
}),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"x","x",1013904362),devdemos.core.rand_strs.call(null,255),new cljs.core.Keyword(null,"y","y",1013904363),devdemos.core.rand_strs.call(null,255),new cljs.core.Keyword(null,"z","z",1013904364),devdemos.core.rand_strs.call(null,255)], null));
}));
devdemos.core.css_transform = (function css_transform(p__15678){var map__15680 = p__15678;var map__15680__$1 = ((cljs.core.seq_QMARK_.call(null,map__15680))?cljs.core.apply.call(null,cljs.core.hash_map,map__15680):map__15680);var tz = cljs.core.get.call(null,map__15680__$1,new cljs.core.Keyword(null,"tz","tz",1013907960));var ty = cljs.core.get.call(null,map__15680__$1,new cljs.core.Keyword(null,"ty","ty",1013907959));var tx = cljs.core.get.call(null,map__15680__$1,new cljs.core.Keyword(null,"tx","tx",1013907958));var rz = cljs.core.get.call(null,map__15680__$1,new cljs.core.Keyword(null,"rz","rz",1013907898));var ry = cljs.core.get.call(null,map__15680__$1,new cljs.core.Keyword(null,"ry","ry",1013907897));var rx = cljs.core.get.call(null,map__15680__$1,new cljs.core.Keyword(null,"rx","rx",1013907896));var trns = [cljs.core.str("rotateX("),cljs.core.str((function (){var or__7869__auto__ = rx;if(cljs.core.truth_(or__7869__auto__))
{return or__7869__auto__;
} else
{return 0;
}
})()),cljs.core.str("deg) "),cljs.core.str("rotateY("),cljs.core.str((function (){var or__7869__auto__ = ry;if(cljs.core.truth_(or__7869__auto__))
{return or__7869__auto__;
} else
{return 0;
}
})()),cljs.core.str("deg) "),cljs.core.str("rotateZ("),cljs.core.str((function (){var or__7869__auto__ = rz;if(cljs.core.truth_(or__7869__auto__))
{return or__7869__auto__;
} else
{return 0;
}
})()),cljs.core.str("deg) "),cljs.core.str("translateX("),cljs.core.str((function (){var or__7869__auto__ = tx;if(cljs.core.truth_(or__7869__auto__))
{return or__7869__auto__;
} else
{return 0;
}
})()),cljs.core.str("px) "),cljs.core.str("translateY("),cljs.core.str((function (){var or__7869__auto__ = ty;if(cljs.core.truth_(or__7869__auto__))
{return or__7869__auto__;
} else
{return 0;
}
})()),cljs.core.str("px) "),cljs.core.str("translateZ("),cljs.core.str((function (){var or__7869__auto__ = tz;if(cljs.core.truth_(or__7869__auto__))
{return or__7869__auto__;
} else
{return 0;
}
})()),cljs.core.str("px) ")].join('');return new cljs.core.PersistentArrayMap(null, 2, ["-webkit-transform",trns,"transform",trns], null);
});
devdemos.core.side = (function side(trans,side_css){return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"div.side","div.side",1324136454),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",1123684643),cljs.core.clj__GT_js.call(null,cljs.core.merge.call(null,side_css,devdemos.core.css_transform.call(null,trans)))], null)], null);
});
devdemos.core.cube = (function cube(p__15681){var map__15683 = p__15681;var map__15683__$1 = ((cljs.core.seq_QMARK_.call(null,map__15683))?cljs.core.apply.call(null,cljs.core.hash_map,map__15683):map__15683);var side_css = cljs.core.get.call(null,map__15683__$1,new cljs.core.Keyword(null,"side-css","side-css",1229865983));var cube_css = cljs.core.get.call(null,map__15683__$1,new cljs.core.Keyword(null,"cube-css","cube-css",1117555677));var size = cljs.core.get.call(null,map__15683__$1,new cljs.core.Keyword(null,"size","size",1017434995));var translate = (size / 2);var base_side_css = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"backgroundColor","backgroundColor",2301028935),"green",new cljs.core.Keyword(null,"width","width",1127031096),[cljs.core.str(size),cljs.core.str("px")].join(''),new cljs.core.Keyword(null,"height","height",4087841945),[cljs.core.str(size),cljs.core.str("px")].join(''),new cljs.core.Keyword(null,"position","position",1761709211),"absolute",new cljs.core.Keyword(null,"top","top",1014019271),"0px"], null);var base_cube_css = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"width","width",1127031096),"100%",new cljs.core.Keyword(null,"height","height",4087841945),"100%",new cljs.core.Keyword(null,"-webkit-transform-style","-webkit-transform-style",3569295140),"preserve-3d"], null);var cube_css__$1 = cljs.core.merge.call(null,base_cube_css,cube_css);var side_css__$1 = cljs.core.merge.call(null,base_side_css,side_css);return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"div.cube","div.cube",1323671268),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",1123684643),cljs.core.clj__GT_js.call(null,cube_css__$1)], null),devdemos.core.side.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"ry","ry",1013907897),0,new cljs.core.Keyword(null,"tz","tz",1013907960),translate], null),cljs.core.assoc.call(null,side_css__$1,new cljs.core.Keyword(null,"backgroundColor","backgroundColor",2301028935),"blue")),devdemos.core.side.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"ry","ry",1013907897),180,new cljs.core.Keyword(null,"tz","tz",1013907960),translate], null),cljs.core.assoc.call(null,side_css__$1,new cljs.core.Keyword(null,"backgroundColor","backgroundColor",2301028935),"blue")),devdemos.core.side.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"ry","ry",1013907897),90,new cljs.core.Keyword(null,"tz","tz",1013907960),translate], null),cljs.core.assoc.call(null,side_css__$1,new cljs.core.Keyword(null,"backgroundColor","backgroundColor",2301028935),"green")),devdemos.core.side.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"ry","ry",1013907897),270,new cljs.core.Keyword(null,"tz","tz",1013907960),translate], null),cljs.core.assoc.call(null,side_css__$1,new cljs.core.Keyword(null,"backgroundColor","backgroundColor",2301028935),"green")),devdemos.core.side.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"rx","rx",1013907896),90,new cljs.core.Keyword(null,"tz","tz",1013907960),translate], null),cljs.core.assoc.call(null,side_css__$1,new cljs.core.Keyword(null,"backgroundColor","backgroundColor",2301028935),"red")),devdemos.core.side.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"rx","rx",1013907896),270,new cljs.core.Keyword(null,"tz","tz",1013907960),translate], null),cljs.core.assoc.call(null,side_css__$1,new cljs.core.Keyword(null,"backgroundColor","backgroundColor",2301028935),"yellow"))], null);
});
devdemos.core.cube_template = (function cube_template(state){return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"div","div",1014003715),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",1123684643),(function (){var obj15687 = {"position":"relative","width":"200px","height":"200px"};return obj15687;
})()], null),devdemos.core.cube.call(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"size","size",1017434995),200,new cljs.core.Keyword(null,"cube-css","cube-css",1117555677),devdemos.core.css_transform.call(null,state),new cljs.core.Keyword(null,"side-css","side-css",1229865983),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"width","width",1127031096),"200px",new cljs.core.Keyword(null,"height","height",4087841945),"200px",new cljs.core.Keyword(null,"opacity","opacity",4041665405),"0.5",new cljs.core.Keyword(null,"border","border",3925567390),"10px solid #333"], null)], null))], null);
});
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"threed-fun","threed-fun",4237250858)], null),devcards.system.get_options.call(null,devcards.core.slider_card.call(null,cljs.core.identity,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"rx","rx",1013907896),cljs.core.range.call(null,360),new cljs.core.Keyword(null,"ry","ry",1013907897),cljs.core.range.call(null,360),new cljs.core.Keyword(null,"rz","rz",1013907898),cljs.core.range.call(null,360)], null),new cljs.core.Keyword(null,"value-render-func","value-render-func",4665148849),devdemos.core.cube_template)),(function (){return devcards.core.slider_card.call(null,cljs.core.identity,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"rx","rx",1013907896),cljs.core.range.call(null,360),new cljs.core.Keyword(null,"ry","ry",1013907897),cljs.core.range.call(null,360),new cljs.core.Keyword(null,"rz","rz",1013907898),cljs.core.range.call(null,360)], null),new cljs.core.Keyword(null,"value-render-func","value-render-func",4665148849),devdemos.core.cube_template);
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"hekler-card-intro","hekler-card-intro",1888759715)], null),devcards.system.get_options.call(null,devcards.core.markdown_card.call(null,"### Hekler Card\n   A heckler card is a primitive quick check to help find bugs in a function.\n   You provide a function to test and a generator  which generates vectors\n   of arguments for that function. ")),(function (){return devcards.core.markdown_card.call(null,"### Hekler Card\n   A heckler card is a primitive quick check to help find bugs in a function.\n   You provide a function to test and a generator  which generates vectors\n   of arguments for that function. ");
}));
devdemos.core.to_heckle_f = (function to_heckle_f(a,b){if((cljs.core.mod.call(null,b,10) === 0))
{throw (new Error("Crappers Error Thrown"));
} else
{return (a + b);
}
});
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"hekler-card-ex","hekler-card-ex",3942746240)], null),devcards.system.get_options.call(null,devcards.core.heckler_card.call(null,devdemos.core.to_heckle_f,(function (){return cljs.core.map.call(null,cljs.core.vector,cljs.core.repeatedly.call(null,30,(function (){return cljs.core.rand_int.call(null,300);
})),cljs.core.repeatedly.call(null,30,(function (){return cljs.core.rand_int.call(null,300);
})));
}),new cljs.core.Keyword(null,"test-func","test-func",4082171537),(function (args,x){return (x < 350);
}))),(function (){return devcards.core.heckler_card.call(null,devdemos.core.to_heckle_f,(function (){return cljs.core.map.call(null,cljs.core.vector,cljs.core.repeatedly.call(null,30,(function (){return cljs.core.rand_int.call(null,300);
})),cljs.core.repeatedly.call(null,30,(function (){return cljs.core.rand_int.call(null,300);
})));
}),new cljs.core.Keyword(null,"test-func","test-func",4082171537),(function (args,x){return (x < 350);
}));
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"reduce-card-intro","reduce-card-intro",3522664360)], null),devcards.system.get_options.call(null,devcards.core.markdown_card.call(null,"## Reduce card\n   A **reduce-card** is helpful for testing reduce\n   functions. It takes a reduce function a stargin value and then a vector of\n   arguments and the expected accumulated results in this form\n   `[arg1 accum1 arg2 accum2 arg3 accum3]`")),(function (){return devcards.core.markdown_card.call(null,"## Reduce card\n   A **reduce-card** is helpful for testing reduce\n   functions. It takes a reduce function a stargin value and then a vector of\n   arguments and the expected accumulated results in this form\n   `[arg1 accum1 arg2 accum2 arg3 accum3]`");
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"reduce-card-ex","reduce-card-ex",1405986459)], null),devcards.system.get_options.call(null,devcards.core.reduce_card.call(null,cljs.core._PLUS_,1,new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [1,2,1,3,1,4,1,5], null))),(function (){return devcards.core.reduce_card.call(null,cljs.core._PLUS_,1,new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [1,2,1,3,1,4,1,5], null));
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"creating-your-own-cards","creating-your-own-cards",694445640)], null),devcards.system.get_options.call(null,devcards.core.markdown_card.call(null,"# Creating your own cards","You can easily create your own cards. There are two ways to create\n   devcards. You can simply define a function to be a devcard or you\n   can reify an instance that implements the devcard protocols.\n\n   The devcard system maintains two things for each devcard, an atom\n   and a DOM node. The card can then do what it wants, but the idea is\n   for all the state to be maintained in the atom and for all the\n   rendering to be renderd to the node.")),(function (){return devcards.core.markdown_card.call(null,"# Creating your own cards","You can easily create your own cards. There are two ways to create\n   devcards. You can simply define a function to be a devcard or you\n   can reify an instance that implements the devcard protocols.\n\n   The devcard system maintains two things for each devcard, an atom\n   and a DOM node. The card can then do what it wants, but the idea is\n   for all the state to be maintained in the atom and for all the\n   rendering to be renderd to the node.");
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"base-api","base-api",3586201744)], null),devcards.system.get_options.call(null,devcards.core.markdown_card.call(null,"## Function API\n   Devcard functions are basically functions that take a DOM node and a data atom.\n\n   For example this is a devcard.","```\n(fn [{:keys [node data-atom]}] (.innerHTML node \"<h2>Awesome?</h2>\"))\n```\n","and you can use it like so:","```\n(defcard\n  my-first-card\n  (fn [{:keys [node data-atom]}]\n    (set! (.-innerHTML node) \"<h2>Awesome?</h2>\")))\n```\n","You can see it rendered below.")),(function (){return devcards.core.markdown_card.call(null,"## Function API\n   Devcard functions are basically functions that take a DOM node and a data atom.\n\n   For example this is a devcard.","```\n(fn [{:keys [node data-atom]}] (.innerHTML node \"<h2>Awesome?</h2>\"))\n```\n","and you can use it like so:","```\n(defcard\n  my-first-card\n  (fn [{:keys [node data-atom]}]\n    (set! (.-innerHTML node) \"<h2>Awesome?</h2>\")))\n```\n","You can see it rendered below.");
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"my-first-card","my-first-card",2365933120)], null),devcards.system.get_options.call(null,(function (p__15688){var map__15689 = p__15688;var map__15689__$1 = ((cljs.core.seq_QMARK_.call(null,map__15689))?cljs.core.apply.call(null,cljs.core.hash_map,map__15689):map__15689);var data_atom = cljs.core.get.call(null,map__15689__$1,new cljs.core.Keyword(null,"data-atom","data-atom",603797766));var node = cljs.core.get.call(null,map__15689__$1,new cljs.core.Keyword(null,"node","node",1017291124));return node.innerHTML = "<h2>Awesome?</h2>";
})),(function (){return (function (p__15690){var map__15691 = p__15690;var map__15691__$1 = ((cljs.core.seq_QMARK_.call(null,map__15691))?cljs.core.apply.call(null,cljs.core.hash_map,map__15691):map__15691);var data_atom = cljs.core.get.call(null,map__15691__$1,new cljs.core.Keyword(null,"data-atom","data-atom",603797766));var node = cljs.core.get.call(null,map__15691__$1,new cljs.core.Keyword(null,"node","node",1017291124));return node.innerHTML = "<h2>Awesome?</h2>";
});
}));
devcards.core.register_card.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"devdemos.core","devdemos.core",4017496356),new cljs.core.Keyword(null,"advanced-api","advanced-api",3784796513)], null),devcards.system.get_options.call(null,devcards.core.markdown_card.call(null,"## The Devcard Protocols API","Creating a devcard with the protocols API looks like this","```\n(defn super-card [initial-state]\n  (reify\n    IMount\n    (mount\n      [_ {:keys [node data-atom]}]\n      (render-to (sab/html [:h1 \"Super!\"]) node))\n    IUnMount\n    (unmount [_ {:keys [node]}] (unmount-react node))\n    IConfig\n    (-options\n      [_]\n      {:unmount-on-reload false, :initial-state initial-state})))\n```\n","You can then use the card like so:","```\n(defcard my-card-ex (super-card {}))\n```\n")),(function (){return devcards.core.markdown_card.call(null,"## The Devcard Protocols API","Creating a devcard with the protocols API looks like this","```\n(defn super-card [initial-state]\n  (reify\n    IMount\n    (mount\n      [_ {:keys [node data-atom]}]\n      (render-to (sab/html [:h1 \"Super!\"]) node))\n    IUnMount\n    (unmount [_ {:keys [node]}] (unmount-react node))\n    IConfig\n    (-options\n      [_]\n      {:unmount-on-reload false, :initial-state initial-state})))\n```\n","You can then use the card like so:","```\n(defcard my-card-ex (super-card {}))\n```\n");
}));

//# sourceMappingURL=core.js.map