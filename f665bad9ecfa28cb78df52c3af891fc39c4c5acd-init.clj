nil (do (set! *warn-on-reflection* nil) (require (quote cljsbuild.crossover) (quote cljsbuild.util) (quote figwheel-sidecar.repl)) (try (do (clojure.core/letfn [(copy-crossovers__954__auto__ [] (cljsbuild.crossover/copy-crossovers "/Users/brucehauman/workspace/devcards/target/cljsbuild-crossover" (quote [])))] (clojure.core/when (clojure.core/not-empty (quote [])) (copy-crossovers__954__auto__) (cljsbuild.util/once-every-bg 1000 "copying crossovers" copy-crossovers__954__auto__)) (figwheel-sidecar.repl/run-autobuilder {:figwheel-options {:resource-paths ["/Users/brucehauman/workspace/devcards/dev-resources" "/Users/brucehauman/workspace/devcards/resources"], :css-dirs ["resources/public/devcards/css"], :open-file-command "emacsclient", :http-server-root "public", :unique-id "devcards--0.2.0-SNAPSHOT"}, :all-builds [{:build-options {:devcards true, :output-dir "resources/public/devcards/js/compiled/out", :optimizations :none, :output-to "resources/public/devcards/js/compiled/devdemos.js", :source-map-timestamp true, :asset-path "js/compiled/out", :main "devdemos.core"}, :parsed-notify-command {:shell []}, :source-paths ["example_src" "src"], :figwheel {:build-id "devcards-demos", :devcards true}, :id "devcards-demos"} {:build-options {:devcards true, :output-dir "site/out", :optimizations :none, :output-to "site/devdemos.js", :source-map-timestamp true, :asset-path "site/out", :main "devdemos.core"}, :parsed-notify-command {:shell []}, :source-paths ["example_src" "src"], :figwheel {:build-id "website", :devcards true}, :id "website"}], :build-ids []})) (java.lang.System/exit 0)) (catch cljsbuild.test.TestsFailedException e__952__auto__ (java.lang.System/exit 1)) (catch java.lang.Exception e__952__auto__ (do (.printStackTrace e__952__auto__) (java.lang.System/exit 1)))))