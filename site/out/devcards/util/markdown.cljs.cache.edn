;; Analyzed by ClojureScript 0.0-3269
{:use-macros nil, :excludes #{}, :name devcards.util.markdown, :imports nil, :requires {string clojure.string, clojure.string clojure.string, cljsjs.showdown cljsjs.showdown}, :uses nil, :defs {leading-space-count {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/util/markdown.cljs", :line 8, :column 7, :end-line 8, :end-column 26, :arglists (quote ([s]))}, :name devcards.util.markdown/leading-space-count, :variadic false, :file "src/devcards/util/markdown.cljs", :end-column 26, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, code-delim? {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/util/markdown.cljs", :line 12, :column 7, :end-line 12, :end-column 18, :arglists (quote ([s]))}, :name devcards.util.markdown/code-delim?, :variadic false, :file "src/devcards/util/markdown.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, group-and-trim-code-block {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/util/markdown.cljs", :line 16, :column 7, :end-line 16, :end-column 32, :arglists (quote ([xs]))}, :name devcards.util.markdown/group-and-trim-code-block, :variadic false, :file "src/devcards/util/markdown.cljs", :end-column 32, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs]))}, group-and-trim-code-blocks {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/util/markdown.cljs", :line 27, :column 7, :end-line 27, :end-column 33, :arglists (quote ([xs]))}, :name devcards.util.markdown/group-and-trim-code-blocks, :variadic false, :file "src/devcards/util/markdown.cljs", :end-column 33, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs]))}, trim-markdown-string {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/util/markdown.cljs", :line 36, :column 7, :end-line 36, :end-column 27, :arglists (quote ([s]))}, :name devcards.util.markdown/trim-markdown-string, :variadic false, :file "src/devcards/util/markdown.cljs", :end-column 27, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, preformat-markdown {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/util/markdown.cljs", :line 44, :column 7, :end-line 44, :end-column 25, :arglists (quote ([mkdn-strs]))}, :name devcards.util.markdown/preformat-markdown, :variadic false, :file "src/devcards/util/markdown.cljs", :end-column 25, :method-params ([mkdn-strs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mkdn-strs]))}, markdown-to-html {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/util/markdown.cljs", :line 49, :column 9, :end-line 49, :end-column 25, :arglists (quote ([markdown-txt])), :doc "render markdown"}, :name devcards.util.markdown/markdown-to-html, :variadic false, :file "src/devcards/util/markdown.cljs", :end-column 25, :method-params ([markdown-txt]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([markdown-txt])), :doc "render markdown"}, less-sensitive-markdown {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/util/markdown.cljs", :line 54, :column 7, :end-line 54, :end-column 30, :arglists (quote ([m]))}, :name devcards.util.markdown/less-sensitive-markdown, :variadic false, :file "src/devcards/util/markdown.cljs", :end-column 30, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}