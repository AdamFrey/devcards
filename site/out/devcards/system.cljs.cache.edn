;; Analyzed by ClojureScript 0.0-3269
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros, inline-resouce-file devcards.system}, :excludes #{}, :name devcards.system, :imports {History goog.History}, :requires {edn-rend devcards.util.edn-renderer, EventType goog.history.EventType, goog.history.EventType goog.history.EventType, cljs.core.async cljs.core.async, sablono.core sablono.core, History goog.History, events goog.events, devcards.util.edn-renderer devcards.util.edn-renderer, sab sablono.core, string clojure.string, clojure.string clojure.string, goog.events goog.events}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, put! cljs.core.async}, :defs {prevent-> {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 23, :column 7, :end-line 23, :end-column 16, :arglists (quote ([f]))}, :name devcards.system/prevent->, :variadic false, :file "src/devcards/system.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, hash-navigate {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 89, :column 7, :end-line 89, :end-column 20, :arglists (quote ([path]))}, :name devcards.system/hash-navigate, :variadic false, :file "src/devcards/system.cljs", :end-column 20, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, off-the-books {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 329, :column 7, :end-line 329, :end-column 20, :arglists (quote ([channel start-data first-message])), :doc "Run sequential messages off the books outside of the atom and\n   then difference the result so we can only display the new cards \n   that have arrived. This prevents multiple renders and allows us \n   to delete cards live."}, :name devcards.system/off-the-books, :variadic false, :file "src/devcards/system.cljs", :end-column 20, :method-params ([channel start-data first-message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 329, :end-line 329, :max-fixed-arity 3, :fn-var true, :arglists (quote ([channel start-data first-message])), :doc "Run sequential messages off the books outside of the atom and\n   then difference the result so we can only display the new cards \n   that have arrived. This prevents multiple renders and allows us \n   to delete cards live."}, current-page {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 171, :column 7, :end-line 171, :end-column 19, :arglists (quote ([data]))}, :name devcards.system/current-page, :variadic false, :file "src/devcards/system.cljs", :end-column 19, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, devcard? {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 100, :column 7, :end-line 100, :end-column 15, :arglists (quote ([d]))}, :name devcards.system/devcard?, :variadic false, :file "src/devcards/system.cljs", :end-column 15, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d]))}, breadcrumbs {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 206, :column 7, :end-line 206, :end-column 18, :arglists (quote ([{:keys [current-path], :as state}]))}, :name devcards.system/breadcrumbs, :variadic false, :file "src/devcards/system.cljs", :end-column 18, :method-params ([p__69286]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [current-path], :as state}]))}, valid-path? {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 147, :column 7, :end-line 147, :end-column 18, :arglists (quote ([state path]))}, :name devcards.system/valid-path?, :variadic false, :file "src/devcards/system.cljs", :end-column 18, :method-params ([state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state path]))}, card-template {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 190, :column 7, :end-line 190, :end-column 20, :arglists (quote ([state-atom {:keys [path options func], :as card}]))}, :name devcards.system/card-template, :variadic false, :file "src/devcards/system.cljs", :end-column 20, :method-params ([state-atom p__69281]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state-atom {:keys [path options func], :as card}]))}, register-collision {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 114, :column 7, :end-line 114, :end-column 25, :arglists (quote ([state path]))}, :name devcards.system/register-collision, :variadic false, :file "src/devcards/system.cljs", :end-column 25, :method-params ([state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state path]))}, start-ui {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 353, :column 7, :end-line 353, :end-column 15, :arglists (quote ([channel]))}, :name devcards.system/start-ui, :variadic false, :file "src/devcards/system.cljs", :end-column 15, :method-params ([channel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 353, :end-line 353, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channel]))}, set-current-path {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 159, :column 7, :end-line 159, :end-column 23, :arglists (quote ([{:keys [current-path], :as state} path]))}, :name devcards.system/set-current-path, :variadic false, :file "src/devcards/system.cljs", :end-column 23, :method-params ([p__69277 path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [current-path], :as state} path]))}, render-base-if-necessary! {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 62, :column 7, :end-line 62, :end-column 32, :arglists (quote ([]))}, :name devcards.system/render-base-if-necessary!, :variadic false, :file "src/devcards/system.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, devcards-app-element-id {:name devcards.system/devcards-app-element-id, :file "src/devcards/system.cljs", :line 19, :column 1, :end-line 19, :end-column 29, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 19, :column 6, :end-line 19, :end-column 29}}, display-cards {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 183, :column 7, :end-line 183, :end-column 20, :arglists (quote ([state]))}, :name devcards.system/display-cards, :variadic false, :file "src/devcards/system.cljs", :end-column 20, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, *devcard-data* {:name devcards.system/*devcard-data*, :file "src/devcards/system.cljs", :line 188, :column 1, :end-line 188, :end-column 30, :dynamic true, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 188, :column 16, :end-line 188, :end-column 30, :dynamic true}}, unique-card-id->path {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 33, :column 7, :end-line 33, :end-column 27, :arglists (quote ([card-id]))}, :name devcards.system/unique-card-id->path, :variadic false, :file "src/devcards/system.cljs", :end-column 27, :method-params ([card-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([card-id]))}, token->path {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 83, :column 7, :end-line 83, :end-column 18, :arglists (quote ([token]))}, :name devcards.system/token->path, :variadic false, :file "src/devcards/system.cljs", :end-column 18, :method-params ([token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([token]))}, enforce-valid-path {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 151, :column 7, :end-line 151, :end-column 25, :arglists (quote ([state path]))}, :name devcards.system/enforce-valid-path, :variadic false, :file "src/devcards/system.cljs", :end-column 25, :method-params ([state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state path]))}, get-element-by-id {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 25, :column 7, :end-line 25, :end-column 24, :arglists (quote ([id]))}, :name devcards.system/get-element-by-id, :variadic false, :file "src/devcards/system.cljs", :end-column 24, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, devcards-app-node {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 27, :column 7, :end-line 27, :end-column 24, :arglists (quote ([]))}, :name devcards.system/devcards-app-node, :variadic false, :file "src/devcards/system.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, render-cards {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 196, :column 7, :end-line 196, :end-column 19, :arglists (quote ([cards state-atom]))}, :name devcards.system/render-cards, :variadic false, :file "src/devcards/system.cljs", :end-column 19, :method-params ([cards state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cards state-atom]))}, devcard-initial-data {:name devcards.system/devcard-initial-data, :file "src/devcards/system.cljs", :line 133, :column 1, :end-line 133, :end-column 26, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 133, :column 6, :end-line 133, :end-column 26}}, dir-links {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 238, :column 7, :end-line 238, :end-column 16, :arglists (quote ([dirs state-atom]))}, :name devcards.system/dir-links, :variadic false, :file "src/devcards/system.cljs", :end-column 16, :method-params ([dirs state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dirs state-atom]))}, create-style-element {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 40, :column 7, :end-line 40, :end-column 27, :arglists (quote ([id style-text]))}, :name devcards.system/create-style-element, :variadic false, :file "src/devcards/system.cljs", :end-column 27, :method-params ([id style-text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id style-text]))}, display-dir-paths {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 179, :column 7, :end-line 179, :end-column 24, :arglists (quote ([state]))}, :name devcards.system/display-dir-paths, :variadic false, :file "src/devcards/system.cljs", :end-column 24, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, history {:name devcards.system/history, :file "src/devcards/system.cljs", :line 75, :column 1, :end-line 75, :end-column 17, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 75, :column 10, :end-line 75, :end-column 17}}, navigate-to-path {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 231, :column 7, :end-line 231, :end-column 23, :arglists (quote ([key state-atom]))}, :name devcards.system/navigate-to-path, :variadic false, :file "src/devcards/system.cljs", :end-column 23, :method-params ([key state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key state-atom]))}, dev-trans {:name devcards.system/dev-trans, :file "src/devcards/system.cljs", :line 117, :column 1, :end-line 117, :end-column 20, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 117, :column 11, :end-line 117, :end-column 20}}, path->token {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 80, :column 7, :end-line 80, :end-column 18, :arglists (quote ([path]))}, :name devcards.system/path->token, :variadic false, :file "src/devcards/system.cljs", :end-column 18, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, main-cards-template {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 200, :column 7, :end-line 200, :end-column 26, :arglists (quote ([state-atom]))}, :name devcards.system/main-cards-template, :variadic false, :file "src/devcards/system.cljs", :end-column 26, :method-params ([state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state-atom]))}, devcards-ui-setup {:name devcards.system/devcards-ui-setup, :file "src/devcards/system.cljs", :line 354, :column 3, :end-line 354, :end-column 29, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 354, :column 12, :end-line 354, :end-column 29}}, l {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 15, :column 7, :end-line 15, :end-column 8, :arglists (quote ([x]))}, :name devcards.system/l, :variadic false, :file "src/devcards/system.cljs", :end-column 8, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, renderer {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 276, :column 7, :end-line 276, :end-column 15, :arglists (quote ([state-atom]))}, :name devcards.system/renderer, :variadic false, :file "src/devcards/system.cljs", :end-column 15, :method-params ([state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state-atom]))}, prepend-child {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 46, :column 7, :end-line 46, :end-column 20, :arglists (quote ([node node2]))}, :name devcards.system/prepend-child, :variadic false, :file "src/devcards/system.cljs", :end-column 20, :method-params ([node node2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node node2]))}, breadcrumbs-templ {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 216, :column 7, :end-line 216, :end-column 24, :arglists (quote ([crumbs state-atom]))}, :name devcards.system/breadcrumbs-templ, :variadic false, :file "src/devcards/system.cljs", :end-column 24, :method-params ([crumbs state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 2, :fn-var true, :arglists (quote ([crumbs state-atom]))}, app-state {:name devcards.system/app-state, :file "src/devcards/system.cljs", :line 145, :column 1, :end-line 145, :end-column 19, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 145, :column 10, :end-line 145, :end-column 19}}, display-single-card? {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 176, :column 7, :end-line 176, :end-column 27, :arglists (quote ([state]))}, :name devcards.system/display-single-card?, :variadic false, :file "src/devcards/system.cljs", :end-column 27, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, path->unique-card-id {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 29, :column 7, :end-line 29, :end-column 27, :arglists (quote ([path]))}, :name devcards.system/path->unique-card-id, :variadic false, :file "src/devcards/system.cljs", :end-column 27, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, path-collision {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 108, :column 7, :end-line 108, :end-column 21, :arglists (quote ([state path]))}, :name devcards.system/path-collision, :variadic false, :file "src/devcards/system.cljs", :end-column 21, :method-params ([state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state path]))}, add-to-current-path {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 154, :column 7, :end-line 154, :end-column 26, :arglists (quote ([{:keys [current-path], :as state} path]))}, :name devcards.system/add-to-current-path, :variadic false, :file "src/devcards/system.cljs", :end-column 26, :method-params ([p__69274 path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [current-path], :as state} path]))}, devcards-rendered-card-class {:name devcards.system/devcards-rendered-card-class, :file "src/devcards/system.cljs", :line 21, :column 1, :end-line 21, :end-column 34, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 21, :column 6, :end-line 21, :end-column 34}}, hash-routing-init {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 92, :column 7, :end-line 92, :end-column 24, :arglists (quote ([state-atom]))}, :name devcards.system/hash-routing-init, :variadic false, :file "src/devcards/system.cljs", :end-column 24, :method-params ([state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state-atom]))}, set-current-path! {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 167, :column 7, :end-line 167, :end-column 24, :arglists (quote ([state-atom path]))}, :name devcards.system/set-current-path!, :variadic false, :file "src/devcards/system.cljs", :end-column 24, :method-params ([state-atom path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state-atom path]))}, add-css-if-necessary! {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 51, :column 7, :end-line 51, :end-column 28, :arglists (quote ([]))}, :name devcards.system/add-css-if-necessary!, :variadic false, :file "src/devcards/system.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, main-template {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 257, :column 7, :end-line 257, :end-column 20, :arglists (quote ([state-atom]))}, :name devcards.system/main-template, :variadic false, :file "src/devcards/system.cljs", :end-column 20, :method-params ([state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :end-line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state-atom]))}, merge-in-new-data {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/system.cljs", :line 317, :column 7, :end-line 317, :end-column 24, :arglists (quote ([state new-state]))}, :name devcards.system/merge-in-new-data, :variadic false, :file "src/devcards/system.cljs", :end-column 24, :method-params ([state new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state new-state]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, devcards.system devcards.system, sab sablono.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{:path :path-collision-count :cardpath :home :frame :inspect-data :else :default :func :history :recur :current-path :delete-card :watch-atom :hidden :class :padding :cards :position :options :hierarchy :jsreload :base-card-options :register-card :devcards-render :heading}, :order [:cardpath :func :path :position :path-collision-count :hierarchy :default :register-card :options :cards :current-path :base-card-options :frame :heading :padding :hidden :inspect-data :watch-atom :history :delete-card :home :class :recur :else :jsreload :devcards-render]}, :doc nil}