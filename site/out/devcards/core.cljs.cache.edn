;; Analyzed by ClojureScript 0.0-3269
{:use-macros nil, :excludes #{}, :name devcards.core, :imports nil, :requires {edn-rend devcards.util.edn-renderer, devcards.util.utils devcards.util.utils, dev devcards.system, async cljs.core.async, devcards.system devcards.system, cljs.test cljs.test, cljs.core.async cljs.core.async, mark devcards.util.markdown, sablono.core sablono.core, devcards.util.edn-renderer devcards.util.edn-renderer, devcards.util.markdown devcards.util.markdown, sab sablono.core, string clojure.string, utils devcards.util.utils, clojure.string clojure.string}, :uses {chan cljs.core.async, put! cljs.core.async}, :defs {stringer? {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 212, :column 7, :end-line 212, :end-column 16, :arglists (quote ([key opts]))}, :name devcards.core/stringer?, :variadic false, :file "src/devcards/core.cljs", :end-column 16, :method-params ([key opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key opts]))}, card-base {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 346, :column 7, :end-line 346, :end-column 16, :arglists (quote ([opts]))}, :name devcards.core/card-base, :variadic false, :file "src/devcards/core.cljs", :end-column 16, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 346, :end-line 346, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}, react-element? {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 219, :column 7, :end-line 219, :end-column 21, :arglists (quote ([main-obj]))}, :name devcards.core/react-element?, :variadic false, :file "src/devcards/core.cljs", :end-column 21, :method-params ([main-obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 1, :fn-var true, :arglists (quote ([main-obj]))}, card? {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 50, :column 7, :end-line 50, :end-column 12, :arglists (quote ([c]))}, :name devcards.core/card?, :variadic false, :file "src/devcards/core.cljs", :end-column 12, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, DomComponent {:name devcards.core/DomComponent, :file "src/devcards/core.cljs", :line 178, :column 1, :end-line 178, :end-column 22, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 178, :column 10, :end-line 178, :end-column 22}}, map->IdentiyOptions {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 308, :column 12, :end-line 308, :end-column 26, :internal-ctor true, :factory :map, :arglists (quote ([G__32427]))}, :name devcards.core/map->IdentiyOptions, :variadic false, :file "src/devcards/core.cljs", :end-column 26, :method-params ([G__32427]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 308, :end-line 308, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__32427]))}, register-card {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 59, :column 7, :end-line 59, :end-column 20, :arglists (quote ([c]))}, :name devcards.core/register-card, :variadic false, :file "src/devcards/core.cljs", :end-column 20, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, ->EdnLikeOptions {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 329, :column 12, :end-line 329, :end-column 26, :internal-ctor true, :factory :positional, :arglists (quote ([obj]))}, :name devcards.core/->EdnLikeOptions, :variadic false, :file "src/devcards/core.cljs", :end-column 26, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 329, :end-line 329, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, EdnLikeOptions {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup devcards.core/IDevcardOptions}, :name devcards.core/EdnLikeOptions, :file "src/devcards/core.cljs", :end-column 26, :type true, :column 12, :internal-ctor true, :line 329, :record true, :end-line 329, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, edn-like-options {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 323, :column 7, :end-line 323, :end-column 23, :arglists (quote ([main-obj devcard-opts]))}, :name devcards.core/edn-like-options, :variadic false, :file "src/devcards/core.cljs", :end-column 23, :method-params ([main-obj devcard-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 2, :fn-var true, :arglists (quote ([main-obj devcard-opts]))}, map->EdnLikeOptions {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 329, :column 12, :end-line 329, :end-column 26, :internal-ctor true, :factory :map, :arglists (quote ([G__32448]))}, :name devcards.core/map->EdnLikeOptions, :variadic false, :file "src/devcards/core.cljs", :end-column 26, :method-params ([G__32448]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 329, :end-line 329, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__32448]))}, start-devcard-ui!* {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 37, :column 8, :end-line 37, :end-column 26, :private true, :arglists (quote ([]))}, :private true, :name devcards.core/start-devcard-ui!*, :variadic false, :file "src/devcards/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, assert-options-map {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 274, :column 7, :end-line 274, :end-column 25, :arglists (quote ([m]))}, :name devcards.core/assert-options-map, :variadic false, :file "src/devcards/core.cljs", :end-column 25, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 274, :end-line 274, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, test-card-help {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 707, :column 8, :end-line 707, :end-column 22, :private true, :arglists (quote ([& test-thunks])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(test-thunks)], :arglists ([& test-thunks]), :arglists-meta (nil)}}, :private true, :name devcards.core/test-card-help, :variadic true, :file "src/devcards/core.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(test-thunks)], :arglists ([& test-thunks]), :arglists-meta (nil)}, :method-params [(test-thunks)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 707, :end-line 707, :max-fixed-arity 0, :fn-var true, :arglists ([& test-thunks])}, atom-like-options {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 312, :column 7, :end-line 312, :end-column 24, :arglists (quote ([main-obj {:keys [options], :as devcard-opts}]))}, :name devcards.core/atom-like-options, :variadic false, :file "src/devcards/core.cljs", :end-column 24, :method-params ([main-obj p__32433]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 312, :end-line 312, :max-fixed-arity 2, :fn-var true, :arglists (quote ([main-obj {:keys [options], :as devcard-opts}]))}, validate-card-options {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 222, :column 7, :end-line 222, :end-column 28, :arglists (quote ([opts]))}, :name devcards.core/validate-card-options, :variadic false, :file "src/devcards/core.cljs", :end-column 28, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}, booler? {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 205, :column 7, :end-line 205, :end-column 14, :arglists (quote ([key opts]))}, :name devcards.core/booler?, :variadic false, :file "src/devcards/core.cljs", :end-column 14, :method-params ([key opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key opts]))}, coerce-to-devcards-options {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 338, :column 7, :end-line 338, :end-column 33, :arglists (quote ([main-obj]))}, :name devcards.core/coerce-to-devcards-options, :variadic false, :file "src/devcards/core.cljs", :end-column 33, :method-params ([main-obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 338, :end-line 338, :max-fixed-arity 1, :fn-var true, :arglists (quote ([main-obj]))}, frame {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 85, :column 8, :end-line 85, :end-column 13, :private true, :arglists (quote ([children] [children card])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([children] [children card]), :arglists ([children] [children card]), :arglists-meta (nil nil)}}, :private true, :name devcards.core/frame, :variadic false, :file "src/devcards/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([children] [children card]), :arglists ([children] [children card]), :arglists-meta (nil nil)}, :method-params ([children] [children card]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists ([children] [children card])}, -devcard-options {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 112, :column 4, :end-line 112, :end-column 20, :protocol devcards.core/IDevcardOptions, :doc nil, :arglists (quote ([this devcard-opts]))}, :protocol devcards.core/IDevcardOptions, :name devcards.core/-devcard-options, :variadic false, :file "src/devcards/core.cljs", :end-column 20, :method-params ([this devcard-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this devcard-opts])), :doc nil}, markdown->react {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 72, :column 7, :end-line 72, :end-column 22, :arglists (quote ([& strs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(strs)], :arglists ([& strs]), :arglists-meta (nil)}}, :name devcards.core/markdown->react, :variadic true, :file "src/devcards/core.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(strs)], :arglists ([& strs]), :arglists-meta (nil)}, :method-params [(strs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 0, :fn-var true, :arglists ([& strs])}, map->AtomLikeOptions {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 319, :column 12, :end-line 319, :end-column 27, :internal-ctor true, :factory :map, :arglists (quote ([G__32438]))}, :name devcards.core/map->AtomLikeOptions, :variadic false, :file "src/devcards/core.cljs", :end-column 27, :method-params ([G__32438]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 319, :end-line 319, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__32438]))}, test-doc {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 625, :column 8, :end-line 625, :end-column 16, :private true, :arglists (quote ([s]))}, :private true, :name devcards.core/test-doc, :variadic false, :file "src/devcards/core.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 625, :end-line 625, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, render-errors {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 281, :column 7, :end-line 281, :end-column 20, :arglists (quote ([opts errors]))}, :name devcards.core/render-errors, :variadic false, :file "src/devcards/core.cljs", :end-column 20, :method-params ([opts errors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts errors]))}, layout-tests {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 634, :column 8, :end-line 634, :end-column 20, :private true, :arglists (quote ([tests]))}, :private true, :name devcards.core/layout-tests, :variadic false, :file "src/devcards/core.cljs", :end-column 20, :method-params ([tests]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 634, :end-line 634, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tests]))}, error-line {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 262, :column 7, :end-line 262, :end-column 17, :arglists (quote ([e]))}, :name devcards.core/error-line, :variadic false, :file "src/devcards/core.cljs", :end-column 17, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, -devcard {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 115, :column 4, :end-line 115, :end-column 12, :protocol devcards.core/IDevcard, :doc nil, :arglists (quote ([this devcard-opts]))}, :protocol devcards.core/IDevcard, :name devcards.core/-devcard, :variadic false, :file "src/devcards/core.cljs", :end-column 12, :method-params ([this devcard-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this devcard-opts])), :doc nil}, atom-like? {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 334, :column 7, :end-line 334, :end-column 17, :arglists (quote ([x]))}, :name devcards.core/atom-like?, :variadic false, :file "src/devcards/core.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 334, :end-line 334, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, IDevcard {:meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 114, :column 14, :end-line 114, :end-column 22, :doc nil, :protocol-symbol true, :protocol-info {:methods {-devcard [[this devcard-opts]]}}}, :protocol-symbol true, :name devcards.core/IDevcard, :file "src/devcards/core.cljs", :end-column 22, :column 1, :line 114, :protocol-info {:methods {-devcard [[this devcard-opts]]}}, :info nil, :end-line 114, :impls #{}, :doc nil}, edn-like? {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 336, :column 7, :end-line 336, :end-column 16, :arglists (quote ([x]))}, :name devcards.core/edn-like?, :variadic false, :file "src/devcards/core.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 336, :end-line 336, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, devcard-event-chan {:name devcards.core/devcard-event-chan, :file "src/devcards/core.cljs", :line 19, :column 1, :end-line 19, :end-column 28, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 19, :column 10, :end-line 19, :end-column 28}}, card-with-errors {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 302, :column 7, :end-line 302, :end-column 23, :arglists (quote ([card-options]))}, :name devcards.core/card-with-errors, :variadic false, :file "src/devcards/core.cljs", :end-column 23, :method-params ([card-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 1, :fn-var true, :arglists (quote ([card-options]))}, react-raw {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 64, :column 8, :end-line 64, :end-column 17, :private true, :arglists (quote ([raw-html-str]))}, :private true, :name devcards.core/react-raw, :variadic false, :file "src/devcards/core.cljs", :end-column 17, :method-params ([raw-html-str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([raw-html-str]))}, render-test-frame {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 657, :column 7, :end-line 657, :end-column 24, :arglists (quote ([test-summary]))}, :name devcards.core/render-test-frame, :variadic false, :file "src/devcards/core.cljs", :end-column 24, :method-params ([test-summary]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 657, :end-line 657, :max-fixed-arity 1, :fn-var true, :arglists (quote ([test-summary]))}, naked-card {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 77, :column 8, :end-line 77, :end-column 18, :private true, :arglists (quote ([children card]))}, :private true, :name devcards.core/naked-card, :variadic false, :file "src/devcards/core.cljs", :end-column 18, :method-params ([children card]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([children card]))}, display-message {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 597, :column 8, :end-line 597, :end-column 23, :private true, :arglists (quote ([{:keys [message]} body]))}, :private true, :name devcards.core/display-message, :variadic false, :file "src/devcards/core.cljs", :end-column 23, :method-params ([p__32481 body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 597, :end-line 597, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [message]} body]))}, run-test-block {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 586, :column 8, :end-line 586, :end-column 22, :private true, :arglists (quote ([f]))}, :private true, :name devcards.core/run-test-block, :variadic false, :file "src/devcards/core.cljs", :end-column 22, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 586, :end-line 586, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, register-figwheel-listeners! {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 25, :column 7, :end-line 25, :end-column 35, :arglists (quote ([])), :doc "This event doesn't need to be fired for the system to run. It will just render\n   a little faster on reload if it is fired. Figwheel isn't required to run devcards."}, :name devcards.core/register-figwheel-listeners!, :variadic false, :file "src/devcards/core.cljs", :end-column 35, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "This event doesn't need to be fired for the system to run. It will just render\n   a little faster on reload if it is fired. Figwheel isn't required to run devcards."}, render-pass-fail {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 603, :column 7, :end-line 603, :end-column 23, :arglists (quote ([{:keys [expected], :as m}]))}, :name devcards.core/render-pass-fail, :variadic false, :file "src/devcards/core.cljs", :end-column 23, :method-params ([p__32486]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 603, :end-line 603, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [expected], :as m}]))}, HistoryComponent {:name devcards.core/HistoryComponent, :file "src/devcards/core.cljs", :line 419, :column 1, :end-line 419, :end-column 26, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 419, :column 10, :end-line 419, :end-column 26}}, IdentiyOptions {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup devcards.core/IDevcardOptions}, :name devcards.core/IdentiyOptions, :file "src/devcards/core.cljs", :end-column 26, :type true, :column 12, :internal-ctor true, :line 308, :record true, :end-line 308, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, IDevcardOptions {:meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 111, :column 14, :end-line 111, :end-column 29, :doc nil, :protocol-symbol true, :protocol-info {:methods {-devcard-options [[this devcard-opts]]}}}, :protocol-symbol true, :name devcards.core/IDevcardOptions, :file "src/devcards/core.cljs", :end-column 29, :column 1, :line 111, :protocol-info {:methods {-devcard-options [[this devcard-opts]]}}, :info nil, :end-line 111, :impls #{cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/EmptyList cljs.core/LazySeq devcards.core/EdnLikeOptions cljs.core/PersistentVector cljs.core/List string cljs.core/PersistentHashSet cljs.core/Atom devcards.core/IdentiyOptions devcards.core/AtomLikeOptions}, :doc nil}, register-listeners-fig {:name devcards.core/register-listeners-fig, :file "src/devcards/core.cljs", :line 29, :column 3, :end-line 29, :end-column 34, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 29, :column 12, :end-line 29, :end-column 34}}, dom-node* {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 355, :column 8, :end-line 355, :end-column 17, :private true, :arglists (quote ([node-fn]))}, :private true, :name devcards.core/dom-node*, :variadic false, :file "src/devcards/core.cljs", :end-column 17, :method-params ([node-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 355, :end-line 355, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node-fn]))}, test-render {:name devcards.core/test-render, :file "src/devcards/core.cljs", :line 592, :column 1, :end-line 592, :end-column 22, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 592, :column 11, :end-line 592, :end-column 22}}, ->IdentiyOptions {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 308, :column 12, :end-line 308, :end-column 26, :internal-ctor true, :factory :positional, :arglists (quote ([obj]))}, :name devcards.core/->IdentiyOptions, :variadic false, :file "src/devcards/core.cljs", :end-column 26, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 308, :end-line 308, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, AtomLikeOptions {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup devcards.core/IDevcardOptions}, :name devcards.core/AtomLikeOptions, :file "src/devcards/core.cljs", :end-column 27, :type true, :column 12, :internal-ctor true, :line 319, :record true, :end-line 319, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, DevcardBase {:name devcards.core/DevcardBase, :file "src/devcards/core.cljs", :line 119, :column 1, :end-line 119, :end-column 21, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 119, :column 10, :end-line 119, :end-column 21}}, collect-test {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 562, :column 8, :end-line 562, :end-column 20, :private true, :arglists (quote ([m]))}, :private true, :name devcards.core/collect-test, :variadic false, :file "src/devcards/core.cljs", :end-column 20, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 562, :end-line 562, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, hist-recorder* {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 553, :column 8, :end-line 553, :end-column 22, :private true, :arglists (quote ([data-atom]))}, :private true, :name devcards.core/hist-recorder*, :variadic false, :file "src/devcards/core.cljs", :end-column 22, :method-params ([data-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 553, :end-line 553, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data-atom]))}, add-environment-defaults {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 298, :column 7, :end-line 298, :end-column 31, :arglists (quote ([card-options]))}, :name devcards.core/add-environment-defaults, :variadic false, :file "src/devcards/core.cljs", :end-column 31, :method-params ([card-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 298, :end-line 298, :max-fixed-arity 1, :fn-var true, :arglists (quote ([card-options]))}, ->AtomLikeOptions {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 319, :column 12, :end-line 319, :end-column 27, :internal-ctor true, :factory :positional, :arglists (quote ([obj]))}, :name devcards.core/->AtomLikeOptions, :variadic false, :file "src/devcards/core.cljs", :end-column 27, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 319, :end-line 319, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, test-renderer {:protocol-inline nil, :meta {:file "/Users/brucehauman/workspace/devcards/src/devcards/core.cljs", :line 628, :column 8, :end-line 628, :end-column 21, :private true, :arglists (quote ([t]))}, :private true, :name devcards.core/test-renderer, :variadic false, :file "src/devcards/core.cljs", :end-column 21, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 628, :end-line 628, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t]))}}, :require-macros {dev devcards.system, devcards.system devcards.system, sab sablono.core, sablono.core sablono.core, cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{:path :frame :color :testing-contexts :key :inspect-data :else :report-counters :test-doc :default :func :name :value :ignore-click :history :type :propagated-errors :className :documentation :style :div :main-obj :filter :fail :reporter :pointer :_devcards_test_card_reporter :watch-atom :initial-data :hidden :label :last-context :class :padding :expected :context :html-list :error :options :__html :pass :obj :_devcards_collect_tests :hierarchy :actual :jsreload :base-card-options :register-card :message :dangerouslySetInnerHTML :heading :span}, :order [:jsreload :path :func :register-card :key :dangerouslySetInnerHTML :__html :options :padding :hidden :heading :class :name :initial-data :watch-atom :inspect-data :history :main-obj :documentation :frame :label :message :value :propagated-errors :base-card-options :obj :else :pointer :ignore-click :_devcards_collect_tests :testing-contexts :_devcards_test_card_reporter :pass :fail :error :test-doc :reporter :hierarchy :type :default :expected :actual :context :span :style :color :div :className :html-list :last-context :report-counters :filter]}, :doc nil}